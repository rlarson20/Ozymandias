---
description: 
globs: 
alwaysApply: false
---

# Rust Error Handling Best Practices

This rule enforces best practices for error handling in Rust code.

## Rules

1. Use custom error types:
   ```rust
   // ❌ Bad
   fn process(data: &[u8]) -> Result<(), String> {
       if data.is_empty() {
           return Err("Data is empty".to_string());
       }
       Ok(())
   }
   
   // ✅ Good
   #[derive(Debug, thiserror::Error)]
   enum ProcessError {
       #[error("Data is empty")]
       EmptyData,
       #[error("Invalid format: {0}")]
       InvalidFormat(String),
   }
   
   fn process(data: &[u8]) -> Result<(), ProcessError> {
       if data.is_empty() {
           return Err(ProcessError::EmptyData);
       }
       Ok(())
   }
   ```

2. Use error type hierarchies:
   ```rust
   // ❌ Bad
   enum Error {
       Database(String),
       Network(String),
       Validation(String),
   }
   
   // ✅ Good
   #[derive(Debug, thiserror::Error)]
   enum Error {
       #[error("Database error: {0}")]
       Database(#[from] DatabaseError),
       #[error("Network error: {0}")]
       Network(#[from] NetworkError),
       #[error("Validation error: {0}")]
       Validation(#[from] ValidationError),
   }
   
   #[derive(Debug, thiserror::Error)]
   enum DatabaseError {
       #[error("Connection failed: {0}")]
       ConnectionFailed(String),
       #[error("Query failed: {0}")]
       QueryFailed(String),
   }
   ```

3. Implement error recovery:
   ```rust
   // ❌ Bad
   fn process(data: &[u8]) -> Result<(), Error> {
       if let Err(e) = validate(data) {
           return Err(e);
       }
       Ok(())
   }
   
   // ✅ Good
   fn process(data: &[u8]) -> Result<(), Error> {
       match validate(data) {
           Ok(_) => Ok(()),
           Err(e) => {
               // Attempt recovery
               if let Some(recovered) = attempt_recovery(data) {
                   validate(recovered)?;
                   Ok(())
               } else {
                   Err(e)
               }
           }
       }
   }
   ```

4. Provide error context:
   ```rust
   // ❌ Bad
   fn process(data: &[u8]) -> Result<(), Error> {
       if data.len() > MAX_SIZE {
           return Err(Error::TooLarge);
       }
       Ok(())
   }
   
   // ✅ Good
   fn process(data: &[u8]) -> Result<(), Error> {
       if data.len() > MAX_SIZE {
           return Err(Error::TooLarge {
               size: data.len(),
               max: MAX_SIZE,
           });
       }
       Ok(())
   }
   ```

5. Use error propagation:
   ```rust
   // ❌ Bad
   fn process(data: &[u8]) -> Result<(), Error> {
       match validate(data) {
           Ok(_) => match transform(data) {
               Ok(result) => Ok(result),
               Err(e) => Err(e),
           },
           Err(e) => Err(e),
       }
   }
   
   // ✅ Good
   fn process(data: &[u8]) -> Result<(), Error> {
       validate(data)?;
       transform(data)
   }
   ```

6. Use error conversion:
   ```rust
   // ❌ Bad
   fn process(data: &[u8]) -> Result<(), Error> {
       match std::str::from_utf8(data) {
           Ok(s) => Ok(()),
           Err(e) => Err(Error::InvalidUtf8),
       }
   }
   
   // ✅ Good
   fn process(data: &[u8]) -> Result<(), Error> {
       std::str::from_utf8(data)?;
       Ok(())
   }
   ```

## Rationale

- Custom error types provide better error handling and documentation
- Error type hierarchies enable structured error handling
- Error recovery improves robustness
- Error context helps with debugging
- Error propagation reduces boilerplate
- Error conversion enables seamless error handling

## Examples

### Good Example
```rust
use thiserror::Error;
use std::io;
use std::num::ParseIntError;

#[derive(Debug, Error)]
enum AppError {
    #[error("IO error: {0}")]
    Io(#[from] io::Error),
    #[error("Parse error: {0}")]
    Parse(#[from] ParseIntError),
    #[error("Validation error: {0}")]
    Validation(String),
    #[error("Database error: {0}")]
    Database(#[from] DatabaseError),
}

#[derive(Debug, Error)]
enum DatabaseError {
    #[error("Connection failed: {0}")]
    ConnectionFailed(String),
    #[error("Query failed: {0}")]
    QueryFailed(String),
}

struct User {
    id: u32,
    name: String,
    age: u32,
}

impl User {
    fn validate(&self) -> Result<(), AppError> {
        if self.name.is_empty() {
            return Err(AppError::Validation("Name cannot be empty".to_string()));
        }
        if self.age > 150 {
            return Err(AppError::Validation("Age is invalid".to_string()));
        }
        Ok(())
    }
    
    fn from_str(s: &str) -> Result<Self, AppError> {
        let parts: Vec<&str> = s.split(',').collect();
        if parts.len() != 3 {
            return Err(AppError::Validation("Invalid format".to_string()));
        }
        
        let id = parts[0].parse()?;
        let name = parts[1].to_string();
        let age = parts[2].parse()?;
        
        let user = User { id, name, age };
        user.validate()?;
        Ok(user)
    }
    
    fn save_to_file(&self, path: &str) -> Result<(), AppError> {
        let mut file = std::fs::File::create(path)?;
        std::io::Write::write_all(&mut file, self.to_string().as_bytes())?;
        Ok(())
    }
}

impl std::fmt::Display for User {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{},{},{}", self.id, self.name, self.age)
    }
}

fn process_user(input: &str, output_path: &str) -> Result<(), AppError> {
    let user = User::from_str(input)?;
    user.save_to_file(output_path)
}

fn main() {
    match process_user("1,John,30", "user.txt") {
        Ok(_) => println!("User processed successfully"),
        Err(e) => eprintln!("Error: {}", e),
    }
}
```

### Bad Example
```rust
struct User {
    id: u32,
    name: String,
    age: u32,
}

impl User {
    fn validate(&self) -> Result<(), String> {
        if self.name.is_empty() {
            return Err("Name cannot be empty".to_string());
        }
        if self.age > 150 {
            return Err("Age is invalid".to_string());
        }
        Ok(())
    }
    
    fn from_str(s: &str) -> Result<Self, String> {
        let parts: Vec<&str> = s.split(',').collect();
        if parts.len() != 3 {
            return Err("Invalid format".to_string());
        }
        
        let id = parts[0].parse().map_err(|e| e.to_string())?;
        let name = parts[1].to_string();
        let age = parts[2].parse().map_err(|e| e.to_string())?;
        
        let user = User { id, name, age };
        user.validate()?;
        Ok(user)
    }
    
    fn save_to_file(&self, path: &str) -> Result<(), String> {
        std::fs::File::create(path)
            .map_err(|e| e.to_string())?
            .write_all(self.to_string().as_bytes())
            .map_err(|e| e.to_string())
    }
}

impl std::fmt::Display for User {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{},{},{}", self.id, self.name, self.age)
    }
}

fn process_user(input: &str, output_path: &str) -> Result<(), String> {
    let user = User::from_str(input)?;
    user.save_to_file(output_path)
}

fn main() {
    match process_user("1,John,30", "user.txt") {
        Ok(_) => println!("User processed successfully"),
        Err(e) => eprintln!("Error: {}", e),
    }
} 